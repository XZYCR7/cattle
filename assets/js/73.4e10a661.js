(window.webpackJsonp=window.webpackJsonp||[]).push([[73],{882:function(t,s,e){"use strict";e.r(s);var a=e(17),n=Object(a.a)({},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"content"},[t._m(0),t._v(" "),t._m(1),t._v(" "),e("p",[t._v("难度："),e("router-link",{attrs:{to:"/solution/easy/"}},[t._v("简单")])],1),t._v(" "),e("p",[t._v("分类："),e("router-link",{attrs:{to:"/art/linked-list.html"}},[t._v("链表")])],1),t._v(" "),e("p",[t._v("来源："),e("a",{attrs:{href:"https://leetcode.com/problems/intersection-of-two-linked-lists/",target:"_blank",rel:"noopener noreferrer"}},[t._v("LeetCode"),e("OutboundLink")],1),t._v(" "),e("a",{attrs:{href:"https://leetcode-cn.com/problems/intersection-of-two-linked-lists/",target:"_blank",rel:"noopener noreferrer"}},[t._v("力扣"),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("源码："),e("a",{attrs:{href:"https://github.com/swpuLeo/leetcode/blob/master/src/easy/0160-intersection-of-two-linked-lists.js",target:"_blank",rel:"noopener noreferrer"}},[t._v("JS 版本"),e("OutboundLink")],1)]),t._v(" "),t._m(2),t._v(" "),e("p",[t._v("编写一个程序，找到两个单链表相交的起始节点。如下面的两个链表：在节点 c1 开始相交。")]),t._v(" "),t._m(3),t._v(" "),e("p",[t._v("示例 1:")]),t._v(" "),t._m(4),t._m(5),t._v(" "),e("p",[t._v("示例 2:")]),t._v(" "),t._m(6),t._m(7),t._v(" "),e("p",[t._v("示例 3:")]),t._v(" "),t._m(8),t._m(9),t._v(" "),e("p",[t._v("注意：")]),t._v(" "),t._m(10),t._v(" "),e("div",{staticClass:"tip custom-block"},[e("p",{staticClass:"custom-block-title"},[t._v("题目来源")]),t._v(" "),e("p",[t._v("来源：力扣（LeetCode）")]),t._v(" "),e("p",[t._v("链接："),e("a",{attrs:{href:"https://leetcode-cn.com/problems/intersection-of-two-linked-lists",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://leetcode-cn.com/problems/intersection-of-two-linked-lists"),e("OutboundLink")],1)])]),t._v(" "),t._m(11),t._v(" "),e("p",[t._v("思路一")]),t._v(" "),t._m(12),t._m(13),t._v(" "),e("p",[t._v("我为你挑选的"),e("router-link",{attrs:{to:"/art/stack.html"}},[t._v("栈")]),t._v("题目：")],1)])},[function(){var t=this.$createElement,s=this._self._c||t;return s("h1",{attrs:{id:"_0160-删除排序链表中的重复元素"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_0160-删除排序链表中的重复元素","aria-hidden":"true"}},[this._v("#")]),this._v(" 0160 删除排序链表中的重复元素")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"题目导航"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#题目导航","aria-hidden":"true"}},[this._v("#")]),this._v(" 题目导航")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"题目描述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#题目描述","aria-hidden":"true"}},[this._v("#")]),this._v(" 题目描述")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("img",{attrs:{src:"https://w3fun-1253290453.cos.ap-chengdu.myqcloud.com/cattle/illustration/0160-1.png",alt:"0160-1"}})])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("输入：intersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], skipA = 2, skipB = 3\n输出：Reference of the node with value = 8\n输入解释：相交节点的值为 8 （注意，如果两个列表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,0,1,8,4,5]。在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("img",{attrs:{src:"https://w3fun-1253290453.cos.ap-chengdu.myqcloud.com/cattle/illustration/0160-2.png",alt:"0160-2"}})])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("输入：intersectVal = 2, listA = [0,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1\n输出：Reference of the node with value = 2\n输入解释：相交节点的值为 2 （注意，如果两个列表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [0,9,1,2,4]，链表 B 为 [3,2,4]。在 A 中，相交节点前有 3 个节点；在 B 中，相交节点前有 1 个节点。\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("img",{attrs:{src:"https://w3fun-1253290453.cos.ap-chengdu.myqcloud.com/cattle/illustration/0160-3.png",alt:"0160-3"}})])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("输入：intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2\n输出：null\n输入解释：从各自的表头开始算起，链表 A 为 [2,6,4]，链表 B 为 [1,5]。由于这两个链表不相交，所以 intersectVal 必须为 0，而 skipA 和 skipB 可以是任意值。\n解释：这两个链表不相交，因此返回 null。\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("img",{attrs:{src:"https://w3fun-1253290453.cos.ap-chengdu.myqcloud.com/cattle/illustration/0160-4.png",alt:"0160-4"}})])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("如果两个链表没有交点，返回 null.")]),this._v(" "),s("li",[this._v("在返回结果后，两个链表仍须保持原有的结构。")]),this._v(" "),s("li",[this._v("可假定整个链表结构中没有循环。")]),this._v(" "),s("li",[this._v("程序尽量满足 O(n) 时间复杂度，且仅用 O(1) 内存。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"解题思路"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#解题思路","aria-hidden":"true"}},[this._v("#")]),this._v(" 解题思路")])},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * Definition for singly-linked list.\n * function ListNode(val) {\n *     this.val = val;\n *     this.next = null;\n * }\n */")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * @param {ListNode} headA\n * @param {ListNode} headB\n * @return {ListNode}\n */")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("getIntersectionNode")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("headA"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" headB")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("headA "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("headB"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" listA "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" headA"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" listB "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" headB"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("listA "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" listB"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    listA "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("listA "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" headB "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" listA"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    listB "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("listB "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" headA "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" listB"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" listA"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"相关推荐"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#相关推荐","aria-hidden":"true"}},[this._v("#")]),this._v(" 相关推荐")])}],!1,null,null,null);s.default=n.exports}}]);